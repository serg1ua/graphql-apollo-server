{"version":3,"sources":["controllers/index/index.graph.js","components/appBar.js","controllers/index/index.jsx","controllers/users/users.graph.js","controllers/users/users.jsx","controllers/users/user.jsx","controllers/products/products.graph.js","controllers/products/products.jsx","controllers/products/product.jsx","controllers/programs/programs.graph.js","controllers/programs/programs.jsx","controllers/programs/program.jsx","controllers/transactions/transactions.graph.js","controllers/transactions/transactions.jsx","controllers/transactions/transaction.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SAVE_DATA","gql","Appbar","className","AppBar","position","color","Toolbar","Typography","variant","style","textDecoration","title","to","marginLeft","React","Component","File","useMutation","saveData","useState","textQuery","setTextQuery","error","setError","res","setRes","TextareaAutosize","placeholder","rowsMax","rows","width","aria-label","value","onChange","e","target","Button","onClick","variables","data","then","message","catch","USERS","USER","Users","useQuery","loading","getHeaders","Object","keys","users","filter","key","Table","stickyHeader","marginTop","TableHead","TableRow","map","TableCell","align","TableBody","user","hover","role","tabIndex","id","console","log","cursor","Date","toLocaleDateString","User","userId","window","location","pathname","split","Card","textAlign","CardContent","component","gutterBottom","name","created","toLocaleString","PRODUCTS","PRODUCT","Products","products","product","Product","productId","program_id","start","end","price","PROGRAMS","PROGRAM","Programs","programs","program","Program","programId","TRANSACTIONS","TRANSACTION","Transactions","transactions","transaction","Transaction","transactionId","product_id","user_id","timestamp","App","basename","exact","path","Index","Boolean","hostname","match","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2d48b86.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nconst SAVE_DATA = gql`\r\n  mutation Save($data: String!){\r\n    saveData(data: $data) {\r\n        message\r\n      }\r\n  }\r\n`;\r\n\r\nexport default SAVE_DATA;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass Appbar extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className='appbar'>\r\n        <AppBar\r\n          position=\"static\"\r\n          color=\"default\"\r\n        >\r\n          <Toolbar>\r\n            <Typography\r\n              variant=\"h6\"\r\n              color=\"inherit\"\r\n            >\r\n              <Link\r\n                style={{textDecoration: 'none', color: 'black'}}\r\n                title=\"see all posts\"\r\n                to=\"/\"\r\n              >\r\n                Home\r\n              </Link>\r\n            </Typography>\r\n            <h4 style={{marginLeft: '20px'}}>\r\n              <Link\r\n                style={{textDecoration: 'none', color: 'black'}}\r\n                title=\"see all posts\"\r\n                to=\"/users\"\r\n              >\r\n                Users\r\n              </Link>\r\n            </h4>\r\n            <h4 style={{marginLeft: '20px'}}>\r\n              <Link\r\n                style={{textDecoration: 'none', color: 'black'}}\r\n                title=\"see all posts\"\r\n                to=\"/products\"\r\n              >\r\n                Products\r\n              </Link>\r\n            </h4>\r\n            <h4 style={{marginLeft: '20px'}}>\r\n              <Link\r\n                style={{textDecoration: 'none', color: 'black'}}\r\n                title=\"see all posts\"\r\n                to=\"/programs\"\r\n              >\r\n                Programs\r\n              </Link>\r\n            </h4>\r\n            <h4 style={{marginLeft: '20px'}}>\r\n              <Link\r\n                style={{textDecoration: 'none', color: 'black'}}\r\n                title=\"see all posts\"\r\n                to=\"/transactions\"\r\n              >\r\n                Transactions\r\n              </Link>\r\n            </h4>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Appbar;","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport SAVE_DATA from './index.graph';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport '../../index.css'\r\n\r\nconst File = () => {\r\n\r\n  const [saveData] = useMutation(SAVE_DATA);\r\n\r\n  const [textQuery, setTextQuery] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [res, setRes] = useState('');\r\n  const save = () => {\r\n    const response = saveData({\r\n      variables: { data: textQuery }\r\n    });\r\n    response\r\n      .then(res => setRes(res.data.saveData.message))\r\n      .catch(error => setError('Error while saving your data'));\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setTextQuery(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"file\">\r\n      <AppBar />\r\n      <div className=\"content\" >\r\n        <div>\r\n          <TextareaAutosize\r\n            placeholder=\"Enter your text\"\r\n            rowsMax={30}\r\n            rows={10}\r\n            style={{ width: \"50%\" }}\r\n            aria-label=\"maximum height\"\r\n            value={textQuery}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => save()}>\r\n          SEND\r\n      </Button>\r\n      </div>\r\n      <div className=\"content\">\r\n        {error ? (<div>{error}</div>):''}\r\n        {res ? (<div>{res}</div>):''}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default File;","import gql from 'graphql-tag';\r\n\r\nconst USERS = gql`\r\n  query Users{\r\n    users {\r\n      id\r\n      name\r\n      created\r\n    }\r\n  }\r\n`;\r\n\r\nconst USER = gql`\r\n  query User($id: String) {\r\n    user(id: $id) {\r\n      id\r\n      name\r\n      created\r\n    }\r\n  }\r\n`;\r\n\r\nexport { USERS, USER };\r\n","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Table } from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { USERS } from './users.graph';\r\n\r\nconst Users = () => {\r\n  const { loading, error, data } = useQuery(USERS);\r\n\r\n  const getUser = (id) => {\r\n    console.log(id)\r\n  }\r\n  \r\n  const getHeaders = (data) => {\r\n    return Object.keys(data.users[0]).filter(key => key !== '__typename');\r\n  }\r\n  return (\r\n    <div className=\"users\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n        {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <div>\r\n            <Table stickyHeader style={{ marginTop: \"30px\" }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {getHeaders(data).map(key => (\r\n                    <TableCell\r\n                      key={key}\r\n                      style={{ align: \"left\" }}\r\n                    >\r\n                      {key !== '__typename' ? key : null}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data.users.map(user => (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={user.id} onClick={() => getUser(user.id)} style={{ cursor: \"pointer\" }}>\r\n                    <Link\r\n                  to={`/users/${user.id}`}\r\n                  style={{ textDecoration: 'none' }}\r\n                >{getHeaders(data).map(key => (\r\n                      <TableCell key={key} style={{ align: \"left\" }}>\r\n                        {key === \"created\" ? new Date(user[key]).toLocaleDateString() : user[key]}\r\n                      </TableCell>\r\n                    ))}</Link>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { USER } from './users.graph';\r\n\r\nconst User = () => {\r\n  const userId = window.location.pathname.split('/')[2];\r\n  const { loading, error, data } = useQuery(USER, {\r\n    variables: { id: userId }\r\n  });\r\n\r\n  return (\r\n    <div className=\"user\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n        {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <Card style={{ width: \"50%\", textAlign: \"center\" }}>\r\n            <CardContent>\r\n              {console.log(data)}\r\n              <Typography color=\"textSecondary\" variant=\"h5\" component=\"h2\" gutterBottom>\r\n                {data.user.name}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {data.user.id}\r\n              </Typography>\r\n              <Typography variant=\"body2\" component=\"p\">\r\n                {new Date(data.user.created).toLocaleString()}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;","import gql from 'graphql-tag';\r\n\r\nconst PRODUCTS = gql`\r\n  query Products{\r\n    products {\r\n        id\r\n        program_id\r\n        start\r\n        end\r\n        price\r\n    }\r\n  }\r\n`;\r\n\r\nconst PRODUCT = gql`\r\n  query Product($id: String!) {\r\n    product(id: $id) {\r\n        id\r\n        program_id\r\n        start\r\n        end\r\n        price\r\n    }\r\n  }\r\n`;\r\n\r\nexport { PRODUCTS, PRODUCT };","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Table } from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { PRODUCTS } from './products.graph';\r\n\r\nconst Products = () => {\r\n  const { loading, error, data } = useQuery(PRODUCTS);\r\n\r\n  const getProduct = (id) => {\r\n    // console.log(id)\r\n  }\r\n\r\n  const getHeaders = (data) => {\r\n    console.log(data)\r\n    return Object.keys(data.products[0]).filter(key => key !== '__typename');\r\n  }\r\n  return (\r\n    <div className=\"users\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n        {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <div>\r\n            <Table stickyHeader style={{ marginTop: \"30px\" }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {getHeaders(data).map(key => (\r\n                    <TableCell\r\n                      key={key}\r\n                      style={{ align: \"left\" }}\r\n                    >\r\n                      {key !== '__typename' ? key : null}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data.products.map(product => (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={product.id} onClick={() => getProduct(product.id)} style={{ cursor: \"pointer\" }}>\r\n                    <Link\r\n                      to={`/products/${product.id}`}\r\n                      style={{ textDecoration: 'none' }}\r\n                    >{getHeaders(data).map(key => (\r\n                      <TableCell key={key} style={{ align: \"left\" }}>\r\n                        {product[key]}\r\n                      </TableCell>\r\n                    ))}</Link>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Products;","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { PRODUCT } from './products.graph';\r\n\r\nconst Product = () => {\r\n  const productId = window.location.pathname.split('/')[2];\r\n  console.log(productId)\r\n  const { loading, error, data } = useQuery(PRODUCT, {\r\n    variables: { id: productId }\r\n  });\r\n\r\n  return (\r\n    <div className=\"product\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n      {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <Card style={{ width: \"50%\", textAlign: \"center\" }}>\r\n            <CardContent>\r\n              {console.log(data)}\r\n              <Typography color=\"textSecondary\" variant=\"h5\" component=\"h2\" gutterBottom>\r\n                {data.product.program_id}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {data.product.id}\r\n              </Typography>\r\n              <Typography variant=\"body2\" component=\"p\">\r\n                {new Date(data.product.start).toLocaleString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\" component=\"p\">\r\n                {new Date(data.product.end).toLocaleString()}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {data.product.price}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Product;","import gql from 'graphql-tag';\r\n\r\nconst PROGRAMS = gql`\r\n  query Programs{\r\n    programs {\r\n        id\r\n        title\r\n    }\r\n  }\r\n`;\r\n\r\nconst PROGRAM = gql`\r\n  query Program($id: String!) {\r\n    program(id: $id) {\r\n        id\r\n        title\r\n    }\r\n  }\r\n`;\r\n\r\nexport { PROGRAMS, PROGRAM };","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Table } from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { PROGRAMS } from './programs.graph';\r\n\r\nconst Programs = () => {\r\n  const { loading, error, data } = useQuery(PROGRAMS);\r\n\r\n  const getPrograms = (id) => {\r\n    console.log(id)\r\n  }\r\n\r\n  const getHeaders = (data) => {\r\n    console.log(data)\r\n    return Object.keys(data.programs[0]).filter(key => key !== '__typename');\r\n  }\r\n  return (\r\n    <div className=\"programs\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n        {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <div>\r\n            <Table stickyHeader style={{ marginTop: \"30px\" }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {getHeaders(data).map(key => (\r\n                    <TableCell\r\n                      key={key}\r\n                      style={{ align: \"left\" }}\r\n                    >\r\n                      {key !== '__typename' ? key : null}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data.programs.map(program => (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={program.id} onClick={() => getPrograms(program.id)} style={{ cursor: \"pointer\" }}>\r\n                    <Link\r\n                      to={`/programs/${program.id}`}\r\n                      style={{ textDecoration: 'none' }}\r\n                    >{getHeaders(data).map(key => (\r\n                      <TableCell key={key} style={{ align: \"left\" }}>\r\n                        {program[key]}\r\n                      </TableCell>\r\n                    ))}</Link>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Programs;","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { PROGRAM } from './programs.graph';\r\n\r\nconst Program = () => {\r\n  const programId = window.location.pathname.split('/')[2];\r\n  console.log(programId)\r\n  const { loading, error, data } = useQuery(PROGRAM, {\r\n    variables: { id: programId }\r\n  });\r\n\r\n  return (\r\n    <div className=\"program\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n      {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <Card style={{ width: \"50%\", textAlign: \"center\" }}>\r\n            <CardContent>\r\n              {console.log(data)}\r\n              <Typography color=\"textSecondary\" variant=\"h5\" component=\"h2\" gutterBottom>\r\n                {data.program.title}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {data.program.id}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Program;","import gql from 'graphql-tag';\r\n\r\nconst TRANSACTIONS = gql`\r\nquery Transactions {\r\n  transactions {\r\n    id\r\n    product_id\r\n    user_id\r\n    timestamp\r\n  }\r\n}\r\n`;\r\n\r\nconst TRANSACTION = gql`\r\n  query Transaction($id: String!) {\r\n    transaction(id: $id) {\r\n        id\r\n        product_id\r\n        user_id\r\n        timestamp\r\n      }\r\n  }\r\n`;\r\n\r\nexport { TRANSACTIONS, TRANSACTION };","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Table } from '@material-ui/core';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { TRANSACTIONS } from './transactions.graph';\r\n\r\nconst Transactions = () => {\r\n  const { loading, error, data } = useQuery(TRANSACTIONS);\r\n\r\n  const getPrograms = (id) => {\r\n    console.log(id)\r\n  }\r\n\r\n  const getHeaders = (data) => {\r\n    console.log(data)\r\n    return Object.keys(data.transactions[0]).filter(key => key !== '__typename');\r\n  }\r\n  return (\r\n    <div className=\"transactions\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n        {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <div>\r\n            <Table stickyHeader style={{ marginTop: \"30px\" }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {getHeaders(data).map(key => (\r\n                    <TableCell\r\n                      key={key}\r\n                      style={{ align: \"left\" }}\r\n                    >\r\n                      {key !== '__typename' ? key : null}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data.transactions.map(transaction => (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={transaction.id} onClick={() => getPrograms(transaction.id)} style={{ cursor: \"pointer\" }}>\r\n                    <Link\r\n                      to={`/transactions/${transaction.id}`}\r\n                      style={{ textDecoration: 'none' }}\r\n                    >{getHeaders(data).map(key => (\r\n                      <TableCell key={key} style={{ align: \"left\" }}>\r\n                        {transaction[key]}\r\n                      </TableCell>\r\n                    ))}</Link>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transactions;","import React, { useState } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport AppBar from '../../components/appBar';\r\nimport { TRANSACTION } from './transactions.graph';\r\n\r\nconst Transaction = () => {\r\n  const transactionId = window.location.pathname.split('/')[2];\r\n  console.log(transactionId)\r\n  const { loading, error, data } = useQuery(TRANSACTION, {\r\n    variables: { id:  transactionId}\r\n  });\r\n\r\n  return (\r\n    <div className=\"program\">\r\n      <AppBar />\r\n      <div> {loading ? (<div>loading...</div>) : null}\r\n      {error ? (<div>Something went wrong fetching your data!</div>) : null}\r\n        {data ? (\r\n          <Card style={{ width: \"50%\", textAlign: \"center\" }}>\r\n            <CardContent>\r\n              {console.log(data)}\r\n              <Typography color=\"textSecondary\" variant=\"h5\" component=\"h2\" gutterBottom>\r\n                {data.transaction.product_id}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {data.transaction.user_id}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {data.transaction.id}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n              {new Date(data.transaction.timestamp).toLocaleString()}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transaction;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Index from './controllers/index';\nimport Users from './controllers/users/users.jsx';\nimport User from './controllers/users/user.jsx';\nimport Products from './controllers/products/products.jsx';\nimport Product from './controllers/products/product.jsx';\nimport Programs from './controllers/programs/programs.jsx';\nimport Program from './controllers/programs/program.jsx';\nimport Transactions from './controllers/transactions/transactions.jsx';\nimport Transaction from './controllers/transactions/transaction.jsx';\n\nimport './index.css';\n\nconst App = () => (\n\t<Router basename=\"/\">\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={Index} />\n            <Route exact path=\"/users\" component={Users} />\n\t\t\t<Route path=\"/users/:id\" component={User} />\n\t\t\t<Route exact path=\"/products\" component={Products} />\n\t\t\t<Route path=\"/products/:id\" component={Product} />\n            <Route exact path=\"/programs\" component={Programs} />\n\t\t\t<Route path=\"/programs/:id\" component={Program} />\n\t\t\t<Route exact path=\"/transactions\" component={Transactions} />\n\t\t\t<Route path=\"/transactions/:id\" component={Transaction} />\n\t\t</Switch>\n\t</Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}